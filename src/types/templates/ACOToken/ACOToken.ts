// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  EthereumCall,
  EthereumEvent,
  SmartContract,
  EthereumValue,
  JSONValue,
  TypedMap,
  Entity,
  EthereumTuple,
  Bytes,
  Address,
  BigInt,
  CallResult
} from "@graphprotocol/graph-ts";

export class ACOToken__getBaseExerciseDataResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromAddress(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ACOToken__getCollateralOnExerciseResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, EthereumValue> {
    let map = new TypedMap<string, EthereumValue>();
    map.set("value0", EthereumValue.fromUnsignedBigInt(this.value0));
    map.set("value1", EthereumValue.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ACOToken extends SmartContract {
  static bind(address: Address): ACOToken {
    return new ACOToken("ACOToken", address);
  }

  acoFee(): BigInt {
    let result = super.call("acoFee", []);

    return result[0].toBigInt();
  }

  try_acoFee(): CallResult<BigInt> {
    let result = super.tryCall("acoFee", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  assignableCollateral(account: Address): BigInt {
    let result = super.call("assignableCollateral", [
      EthereumValue.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_assignableCollateral(account: Address): CallResult<BigInt> {
    let result = super.tryCall("assignableCollateral", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  assignableTokens(account: Address): BigInt {
    let result = super.call("assignableTokens", [
      EthereumValue.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_assignableTokens(account: Address): CallResult<BigInt> {
    let result = super.tryCall("assignableTokens", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  burn(tokenAmount: BigInt): BigInt {
    let result = super.call("burn", [
      EthereumValue.fromUnsignedBigInt(tokenAmount)
    ]);

    return result[0].toBigInt();
  }

  try_burn(tokenAmount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("burn", [
      EthereumValue.fromUnsignedBigInt(tokenAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  burnFrom(account: Address, tokenAmount: BigInt): BigInt {
    let result = super.call("burnFrom", [
      EthereumValue.fromAddress(account),
      EthereumValue.fromUnsignedBigInt(tokenAmount)
    ]);

    return result[0].toBigInt();
  }

  try_burnFrom(account: Address, tokenAmount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("burnFrom", [
      EthereumValue.fromAddress(account),
      EthereumValue.fromUnsignedBigInt(tokenAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  collateral(): Address {
    let result = super.call("collateral", []);

    return result[0].toAddress();
  }

  try_collateral(): CallResult<Address> {
    let result = super.tryCall("collateral", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  currentCollateral(account: Address): BigInt {
    let result = super.call("currentCollateral", [
      EthereumValue.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_currentCollateral(account: Address): CallResult<BigInt> {
    let result = super.tryCall("currentCollateral", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  currentCollateralizedTokens(account: Address): BigInt {
    let result = super.call("currentCollateralizedTokens", [
      EthereumValue.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_currentCollateralizedTokens(account: Address): CallResult<BigInt> {
    let result = super.tryCall("currentCollateralizedTokens", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", []);

    return result[0].toI32();
  }

  try_decimals(): CallResult<i32> {
    let result = super.tryCall("decimals", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  expiryTime(): BigInt {
    let result = super.call("expiryTime", []);

    return result[0].toBigInt();
  }

  try_expiryTime(): CallResult<BigInt> {
    let result = super.tryCall("expiryTime", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  feeDestination(): Address {
    let result = super.call("feeDestination", []);

    return result[0].toAddress();
  }

  try_feeDestination(): CallResult<Address> {
    let result = super.tryCall("feeDestination", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  getBaseExerciseData(
    tokenAmount: BigInt
  ): ACOToken__getBaseExerciseDataResult {
    let result = super.call("getBaseExerciseData", [
      EthereumValue.fromUnsignedBigInt(tokenAmount)
    ]);

    return new ACOToken__getBaseExerciseDataResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_getBaseExerciseData(
    tokenAmount: BigInt
  ): CallResult<ACOToken__getBaseExerciseDataResult> {
    let result = super.tryCall("getBaseExerciseData", [
      EthereumValue.fromUnsignedBigInt(tokenAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new ACOToken__getBaseExerciseDataResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  getCollateralAmount(tokenAmount: BigInt): BigInt {
    let result = super.call("getCollateralAmount", [
      EthereumValue.fromUnsignedBigInt(tokenAmount)
    ]);

    return result[0].toBigInt();
  }

  try_getCollateralAmount(tokenAmount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getCollateralAmount", [
      EthereumValue.fromUnsignedBigInt(tokenAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralOnExercise(
    tokenAmount: BigInt
  ): ACOToken__getCollateralOnExerciseResult {
    let result = super.call("getCollateralOnExercise", [
      EthereumValue.fromUnsignedBigInt(tokenAmount)
    ]);

    return new ACOToken__getCollateralOnExerciseResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCollateralOnExercise(
    tokenAmount: BigInt
  ): CallResult<ACOToken__getCollateralOnExerciseResult> {
    let result = super.tryCall("getCollateralOnExercise", [
      EthereumValue.fromUnsignedBigInt(tokenAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(
      new ACOToken__getCollateralOnExerciseResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTokenAmount(collateralAmount: BigInt): BigInt {
    let result = super.call("getTokenAmount", [
      EthereumValue.fromUnsignedBigInt(collateralAmount)
    ]);

    return result[0].toBigInt();
  }

  try_getTokenAmount(collateralAmount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("getTokenAmount", [
      EthereumValue.fromUnsignedBigInt(collateralAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  isCall(): boolean {
    let result = super.call("isCall", []);

    return result[0].toBoolean();
  }

  try_isCall(): CallResult<boolean> {
    let result = super.tryCall("isCall", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBoolean());
  }

  maxExercisedAccounts(): BigInt {
    let result = super.call("maxExercisedAccounts", []);

    return result[0].toBigInt();
  }

  try_maxExercisedAccounts(): CallResult<BigInt> {
    let result = super.tryCall("maxExercisedAccounts", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  mint(collateralAmount: BigInt): BigInt {
    let result = super.call("mint", [
      EthereumValue.fromUnsignedBigInt(collateralAmount)
    ]);

    return result[0].toBigInt();
  }

  try_mint(collateralAmount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("mint", [
      EthereumValue.fromUnsignedBigInt(collateralAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  mintTo(account: Address, collateralAmount: BigInt): BigInt {
    let result = super.call("mintTo", [
      EthereumValue.fromAddress(account),
      EthereumValue.fromUnsignedBigInt(collateralAmount)
    ]);

    return result[0].toBigInt();
  }

  try_mintTo(account: Address, collateralAmount: BigInt): CallResult<BigInt> {
    let result = super.tryCall("mintTo", [
      EthereumValue.fromAddress(account),
      EthereumValue.fromUnsignedBigInt(collateralAmount)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", []);

    return result[0].toString();
  }

  try_name(): CallResult<string> {
    let result = super.tryCall("name", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  numberOfAccountsWithCollateral(): BigInt {
    let result = super.call("numberOfAccountsWithCollateral", []);

    return result[0].toBigInt();
  }

  try_numberOfAccountsWithCollateral(): CallResult<BigInt> {
    let result = super.tryCall("numberOfAccountsWithCollateral", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  redeem(): BigInt {
    let result = super.call("redeem", []);

    return result[0].toBigInt();
  }

  try_redeem(): CallResult<BigInt> {
    let result = super.tryCall("redeem", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  redeemFrom(account: Address): BigInt {
    let result = super.call("redeemFrom", [EthereumValue.fromAddress(account)]);

    return result[0].toBigInt();
  }

  try_redeemFrom(account: Address): CallResult<BigInt> {
    let result = super.tryCall("redeemFrom", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  strikeAsset(): Address {
    let result = super.call("strikeAsset", []);

    return result[0].toAddress();
  }

  try_strikeAsset(): CallResult<Address> {
    let result = super.tryCall("strikeAsset", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  strikeAssetDecimals(): i32 {
    let result = super.call("strikeAssetDecimals", []);

    return result[0].toI32();
  }

  try_strikeAssetDecimals(): CallResult<i32> {
    let result = super.tryCall("strikeAssetDecimals", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  strikeAssetSymbol(): string {
    let result = super.call("strikeAssetSymbol", []);

    return result[0].toString();
  }

  try_strikeAssetSymbol(): CallResult<string> {
    let result = super.tryCall("strikeAssetSymbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  strikePrice(): BigInt {
    let result = super.call("strikePrice", []);

    return result[0].toBigInt();
  }

  try_strikePrice(): CallResult<BigInt> {
    let result = super.tryCall("strikePrice", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", []);

    return result[0].toString();
  }

  try_symbol(): CallResult<string> {
    let result = super.tryCall("symbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }

  totalCollateral(): BigInt {
    let result = super.call("totalCollateral", []);

    return result[0].toBigInt();
  }

  try_totalCollateral(): CallResult<BigInt> {
    let result = super.tryCall("totalCollateral", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  unassignableCollateral(account: Address): BigInt {
    let result = super.call("unassignableCollateral", [
      EthereumValue.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_unassignableCollateral(account: Address): CallResult<BigInt> {
    let result = super.tryCall("unassignableCollateral", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  unassignableTokens(account: Address): BigInt {
    let result = super.call("unassignableTokens", [
      EthereumValue.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_unassignableTokens(account: Address): CallResult<BigInt> {
    let result = super.tryCall("unassignableTokens", [
      EthereumValue.fromAddress(account)
    ]);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toBigInt());
  }

  underlying(): Address {
    let result = super.call("underlying", []);

    return result[0].toAddress();
  }

  try_underlying(): CallResult<Address> {
    let result = super.tryCall("underlying", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toAddress());
  }

  underlyingDecimals(): i32 {
    let result = super.call("underlyingDecimals", []);

    return result[0].toI32();
  }

  try_underlyingDecimals(): CallResult<i32> {
    let result = super.tryCall("underlyingDecimals", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toI32());
  }

  underlyingSymbol(): string {
    let result = super.call("underlyingSymbol", []);

    return result[0].toString();
  }

  try_underlyingSymbol(): CallResult<string> {
    let result = super.tryCall("underlyingSymbol", []);
    if (result.reverted) {
      return new CallResult();
    }
    let value = result.value;
    return CallResult.fromValue(value[0].toString());
  }
}

export class BurnCall extends EthereumCall {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BurnFromCall extends EthereumCall {
  get inputs(): BurnFromCall__Inputs {
    return new BurnFromCall__Inputs(this);
  }

  get outputs(): BurnFromCall__Outputs {
    return new BurnFromCall__Outputs(this);
  }
}

export class BurnFromCall__Inputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnFromCall__Outputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExerciseCall extends EthereumCall {
  get inputs(): ExerciseCall__Inputs {
    return new ExerciseCall__Inputs(this);
  }

  get outputs(): ExerciseCall__Outputs {
    return new ExerciseCall__Outputs(this);
  }
}

export class ExerciseCall__Inputs {
  _call: ExerciseCall;

  constructor(call: ExerciseCall) {
    this._call = call;
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get salt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ExerciseCall__Outputs {
  _call: ExerciseCall;

  constructor(call: ExerciseCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExerciseAccountsCall extends EthereumCall {
  get inputs(): ExerciseAccountsCall__Inputs {
    return new ExerciseAccountsCall__Inputs(this);
  }

  get outputs(): ExerciseAccountsCall__Outputs {
    return new ExerciseAccountsCall__Outputs(this);
  }
}

export class ExerciseAccountsCall__Inputs {
  _call: ExerciseAccountsCall;

  constructor(call: ExerciseAccountsCall) {
    this._call = call;
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }
}

export class ExerciseAccountsCall__Outputs {
  _call: ExerciseAccountsCall;

  constructor(call: ExerciseAccountsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExerciseAccountsFromCall extends EthereumCall {
  get inputs(): ExerciseAccountsFromCall__Inputs {
    return new ExerciseAccountsFromCall__Inputs(this);
  }

  get outputs(): ExerciseAccountsFromCall__Outputs {
    return new ExerciseAccountsFromCall__Outputs(this);
  }
}

export class ExerciseAccountsFromCall__Inputs {
  _call: ExerciseAccountsFromCall;

  constructor(call: ExerciseAccountsFromCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get accounts(): Array<Address> {
    return this._call.inputValues[2].value.toAddressArray();
  }
}

export class ExerciseAccountsFromCall__Outputs {
  _call: ExerciseAccountsFromCall;

  constructor(call: ExerciseAccountsFromCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class ExerciseFromCall extends EthereumCall {
  get inputs(): ExerciseFromCall__Inputs {
    return new ExerciseFromCall__Inputs(this);
  }

  get outputs(): ExerciseFromCall__Outputs {
    return new ExerciseFromCall__Outputs(this);
  }
}

export class ExerciseFromCall__Inputs {
  _call: ExerciseFromCall;

  constructor(call: ExerciseFromCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get salt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ExerciseFromCall__Outputs {
  _call: ExerciseFromCall;

  constructor(call: ExerciseFromCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class InitCall extends EthereumCall {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _underlying(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _strikeAsset(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _isCall(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _strikePrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _expiryTime(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _acoFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _feeDestination(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _maxExercisedAccounts(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class MintCall extends EthereumCall {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get collateralAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintPayableCall extends EthereumCall {
  get inputs(): MintPayableCall__Inputs {
    return new MintPayableCall__Inputs(this);
  }

  get outputs(): MintPayableCall__Outputs {
    return new MintPayableCall__Outputs(this);
  }
}

export class MintPayableCall__Inputs {
  _call: MintPayableCall;

  constructor(call: MintPayableCall) {
    this._call = call;
  }
}

export class MintPayableCall__Outputs {
  _call: MintPayableCall;

  constructor(call: MintPayableCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintToCall extends EthereumCall {
  get inputs(): MintToCall__Inputs {
    return new MintToCall__Inputs(this);
  }

  get outputs(): MintToCall__Outputs {
    return new MintToCall__Outputs(this);
  }
}

export class MintToCall__Inputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateralAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintToCall__Outputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintToPayableCall extends EthereumCall {
  get inputs(): MintToPayableCall__Inputs {
    return new MintToPayableCall__Inputs(this);
  }

  get outputs(): MintToPayableCall__Outputs {
    return new MintToPayableCall__Outputs(this);
  }
}

export class MintToPayableCall__Inputs {
  _call: MintToPayableCall;

  constructor(call: MintToPayableCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class MintToPayableCall__Outputs {
  _call: MintToPayableCall;

  constructor(call: MintToPayableCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemCall extends EthereumCall {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemFromCall extends EthereumCall {
  get inputs(): RedeemFromCall__Inputs {
    return new RedeemFromCall__Inputs(this);
  }

  get outputs(): RedeemFromCall__Outputs {
    return new RedeemFromCall__Outputs(this);
  }
}

export class RedeemFromCall__Inputs {
  _call: RedeemFromCall;

  constructor(call: RedeemFromCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RedeemFromCall__Outputs {
  _call: RedeemFromCall;

  constructor(call: RedeemFromCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}
